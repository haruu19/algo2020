import java.util.Scanner;

public class boj17471 {
	static int N;
	static boolean[] v;
	static boolean[] vv;
	static int[] p;
	static boolean flag;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		p = new int[N+1];
		for(int i=1;i<=N;i++)
			p[i] = sc.nextInt();
		int[][] a = new int[N+1][N+1];
		for(int i=1;i<=N;i++) {
			int n = sc.nextInt();
			for(int j=0;j<n;j++) {
				int m = sc.nextInt();
				a[i][m] = 1;
				a[m][i] = 1;
			}
		}
		v = new boolean[N+1];
		vv = new boolean[N+1];
		method(1);
		
	}
	
	static void dfs(int i, boolean flag) {
		for(int i=1;i<=N;i++) {
			
		}
	}
	
	static void method(int idx) {
		if(idx == N+1) {
			//하나의 선거구밖에 없는 경우 종료한다.
			boolean check = false;
			for(int i=1;i<N;i++) {
				if(v[i]!=v[i+1]) {
					check = true;
					break;
				}
			}
			if(!check)
				return;
			//각 구역마다 dfs를 해서 모든 구역이 reachable 한 경우 두 구역의 최솟값을 구한다. 
			flag = false;
			for(int i=1;i<=N;i++) {
				dfs(i, flag);
			}
			return;
		}
		//재귀, 현재 인덱스를 포함하는 경우
		v[idx] = true;
		method(idx+1);
		//재귀, 현재 인덱스를 포함하지 않는 경우
		v[idx] = false;
		method(idx+1);
	}
}
